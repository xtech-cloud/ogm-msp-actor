// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/actor/application.proto

package actor

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Application service

func NewApplicationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Application service

type ApplicationService interface {
	// 添加
	Add(ctx context.Context, in *ApplicationAddRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 移除
	Remove(ctx context.Context, in *ApplicationRemoveRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 列举
	List(ctx context.Context, in *ApplicationListRequest, opts ...client.CallOption) (*ApplicationListResponse, error)
}

type applicationService struct {
	c    client.Client
	name string
}

func NewApplicationService(name string, c client.Client) ApplicationService {
	return &applicationService{
		c:    c,
		name: name,
	}
}

func (c *applicationService) Add(ctx context.Context, in *ApplicationAddRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Application.Add", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationService) Remove(ctx context.Context, in *ApplicationRemoveRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Application.Remove", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationService) List(ctx context.Context, in *ApplicationListRequest, opts ...client.CallOption) (*ApplicationListResponse, error) {
	req := c.c.NewRequest(c.name, "Application.List", in)
	out := new(ApplicationListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Application service

type ApplicationHandler interface {
	// 添加
	Add(context.Context, *ApplicationAddRequest, *BlankResponse) error
	// 移除
	Remove(context.Context, *ApplicationRemoveRequest, *BlankResponse) error
	// 列举
	List(context.Context, *ApplicationListRequest, *ApplicationListResponse) error
}

func RegisterApplicationHandler(s server.Server, hdlr ApplicationHandler, opts ...server.HandlerOption) error {
	type application interface {
		Add(ctx context.Context, in *ApplicationAddRequest, out *BlankResponse) error
		Remove(ctx context.Context, in *ApplicationRemoveRequest, out *BlankResponse) error
		List(ctx context.Context, in *ApplicationListRequest, out *ApplicationListResponse) error
	}
	type Application struct {
		application
	}
	h := &applicationHandler{hdlr}
	return s.Handle(s.NewHandler(&Application{h}, opts...))
}

type applicationHandler struct {
	ApplicationHandler
}

func (h *applicationHandler) Add(ctx context.Context, in *ApplicationAddRequest, out *BlankResponse) error {
	return h.ApplicationHandler.Add(ctx, in, out)
}

func (h *applicationHandler) Remove(ctx context.Context, in *ApplicationRemoveRequest, out *BlankResponse) error {
	return h.ApplicationHandler.Remove(ctx, in, out)
}

func (h *applicationHandler) List(ctx context.Context, in *ApplicationListRequest, out *ApplicationListResponse) error {
	return h.ApplicationHandler.List(ctx, in, out)
}
