// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/actor/domain.proto

package actor

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Domain service

func NewDomainEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Domain service

type DomainService interface {
	// 创建
	Create(ctx context.Context, in *DomainCreateRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 删除
	Delete(ctx context.Context, in *DomainDeleteRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 列举
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*DomainListResponse, error)
	// 精确查找一个域
	Find(ctx context.Context, in *DomainFindRequest, opts ...client.CallOption) (*DomainFindResponse, error)
	// 模糊查找域
	Search(ctx context.Context, in *DomainSearchRequest, opts ...client.CallOption) (*DomainSearchResponse, error)
	// 执行
	Execute(ctx context.Context, in *DomainExecuteRequest, opts ...client.CallOption) (*BlankResponse, error)
}

type domainService struct {
	c    client.Client
	name string
}

func NewDomainService(name string, c client.Client) DomainService {
	return &domainService{
		c:    c,
		name: name,
	}
}

func (c *domainService) Create(ctx context.Context, in *DomainCreateRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Domain.Create", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainService) Delete(ctx context.Context, in *DomainDeleteRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Domain.Delete", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*DomainListResponse, error) {
	req := c.c.NewRequest(c.name, "Domain.List", in)
	out := new(DomainListResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainService) Find(ctx context.Context, in *DomainFindRequest, opts ...client.CallOption) (*DomainFindResponse, error) {
	req := c.c.NewRequest(c.name, "Domain.Find", in)
	out := new(DomainFindResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainService) Search(ctx context.Context, in *DomainSearchRequest, opts ...client.CallOption) (*DomainSearchResponse, error) {
	req := c.c.NewRequest(c.name, "Domain.Search", in)
	out := new(DomainSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainService) Execute(ctx context.Context, in *DomainExecuteRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Domain.Execute", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Domain service

type DomainHandler interface {
	// 创建
	Create(context.Context, *DomainCreateRequest, *BlankResponse) error
	// 删除
	Delete(context.Context, *DomainDeleteRequest, *BlankResponse) error
	// 列举
	List(context.Context, *ListRequest, *DomainListResponse) error
	// 精确查找一个域
	Find(context.Context, *DomainFindRequest, *DomainFindResponse) error
	// 模糊查找域
	Search(context.Context, *DomainSearchRequest, *DomainSearchResponse) error
	// 执行
	Execute(context.Context, *DomainExecuteRequest, *BlankResponse) error
}

func RegisterDomainHandler(s server.Server, hdlr DomainHandler, opts ...server.HandlerOption) error {
	type domain interface {
		Create(ctx context.Context, in *DomainCreateRequest, out *BlankResponse) error
		Delete(ctx context.Context, in *DomainDeleteRequest, out *BlankResponse) error
		List(ctx context.Context, in *ListRequest, out *DomainListResponse) error
		Find(ctx context.Context, in *DomainFindRequest, out *DomainFindResponse) error
		Search(ctx context.Context, in *DomainSearchRequest, out *DomainSearchResponse) error
		Execute(ctx context.Context, in *DomainExecuteRequest, out *BlankResponse) error
	}
	type Domain struct {
		domain
	}
	h := &domainHandler{hdlr}
	return s.Handle(s.NewHandler(&Domain{h}, opts...))
}

type domainHandler struct {
	DomainHandler
}

func (h *domainHandler) Create(ctx context.Context, in *DomainCreateRequest, out *BlankResponse) error {
	return h.DomainHandler.Create(ctx, in, out)
}

func (h *domainHandler) Delete(ctx context.Context, in *DomainDeleteRequest, out *BlankResponse) error {
	return h.DomainHandler.Delete(ctx, in, out)
}

func (h *domainHandler) List(ctx context.Context, in *ListRequest, out *DomainListResponse) error {
	return h.DomainHandler.List(ctx, in, out)
}

func (h *domainHandler) Find(ctx context.Context, in *DomainFindRequest, out *DomainFindResponse) error {
	return h.DomainHandler.Find(ctx, in, out)
}

func (h *domainHandler) Search(ctx context.Context, in *DomainSearchRequest, out *DomainSearchResponse) error {
	return h.DomainHandler.Search(ctx, in, out)
}

func (h *domainHandler) Execute(ctx context.Context, in *DomainExecuteRequest, out *BlankResponse) error {
	return h.DomainHandler.Execute(ctx, in, out)
}
