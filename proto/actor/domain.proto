syntax = "proto3";

import "proto/actor/shared.proto";

package actor;
option go_package = "proto/actor;actor";

// 域
service Domain
{
    // 创建
    rpc Create(DomainCreateRequest) returns (BlankResponse) { }
    // 删除
    rpc Delete(DomainDeleteRequest) returns (BlankResponse) { }
    // 列举
    rpc List(ListRequest) returns (DomainListResponse) { }
    // 精确查找一个域
    rpc Find(DomainFindRequest) returns (DomainFindResponse) { }
    // 模糊查找域
    rpc Search(DomainSearchRequest) returns (DomainSearchResponse) { }
    // 执行
    rpc Execute(DomainExecuteRequest) returns (BlankResponse) { }
    // 获取设备
    rpc FetchDevice(DomainFetchDeviceRequest) returns (DomainFetchDeviceResponse) { }
    // 编辑设备
    rpc EditDevice(DomainEditDeviceRequest) returns (BlankResponse) { }
}

// 创建的请求
message DomainCreateRequest
{
    string name = 1; // 域的名称
}

// 删除的请求
message DomainDeleteRequest
{
    string uuid = 1; // 域的uuid
}

// 列举的回复
message DomainListResponse
{
    Status status = 1;                // 状态
    int64 total = 2;                  // 总数
    repeated DomainEntity domain = 3; //域实体
}

// 查找的请求
message DomainFindRequest
{
    string name = 1; // 域的名称
}

// 查找的回复
message DomainFindResponse
{
    Status status = 1;       // 状态
    DomainEntity domain = 2; //域实体
}

// 搜索的请求
message DomainSearchRequest
{
    int64 offset = 1; // 偏移值
    int64 count = 2;  // 数量
    string name = 3;  // 域的名称
}

// 搜索的回复
message DomainSearchResponse
{
    Status status = 1;                // 状态
    int64 total = 2;                  // 总数
    repeated DomainEntity domain = 3; //域实体
}

// 执行的请求
message DomainExecuteRequest
{
    string uuid = 1;            // 域的uuid
    string command = 2;         // 指令
    repeated string device = 3; // 设备ID
    string parameter = 4;       // 参数(base64编码的json格式)
}

// 获取设备的请求
message DomainFetchDeviceRequest
{
    string uuid = 1;                // 域的uuid
    int64 offset = 2;               // 偏移值
    int64 count = 3;                // 数量
    map<string, string> filter = 4; // 过滤器
}

// 获取设备的回复
message DomainFetchDeviceResponse
{
    Status status = 1;                // 状态
    int64 total = 2;                  // 总数
    repeated DeviceEntity device = 3; // 设备实体列表
    map<string, int32> access = 4;    // 设备访问权限
    map<string, string> alias = 5;    // 设备别名
}

// 编辑设备的请求
message DomainEditDeviceRequest
{
    string uuid = 1;   // 域的uuid
    string device = 2; // 设备的uuid
    int32 access = 3;  // 访问权限(1:允许，2：拒绝)
    string alias = 4;  // 别名
}
