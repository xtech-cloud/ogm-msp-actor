// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/actor/guard.proto

package actor

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Guard service

func NewGuardEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Guard service

type GuardService interface {
	// 获取
	Fetch(ctx context.Context, in *GuardFetchRequest, opts ...client.CallOption) (*GuardFetchResponse, error)
	// 编辑
	Edit(ctx context.Context, in *GuardEditRequest, opts ...client.CallOption) (*BlankResponse, error)
	// 删除
	Delete(ctx context.Context, in *GuardDeleteRequest, opts ...client.CallOption) (*BlankResponse, error)
}

type guardService struct {
	c    client.Client
	name string
}

func NewGuardService(name string, c client.Client) GuardService {
	return &guardService{
		c:    c,
		name: name,
	}
}

func (c *guardService) Fetch(ctx context.Context, in *GuardFetchRequest, opts ...client.CallOption) (*GuardFetchResponse, error) {
	req := c.c.NewRequest(c.name, "Guard.Fetch", in)
	out := new(GuardFetchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardService) Edit(ctx context.Context, in *GuardEditRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Guard.Edit", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardService) Delete(ctx context.Context, in *GuardDeleteRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Guard.Delete", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Guard service

type GuardHandler interface {
	// 获取
	Fetch(context.Context, *GuardFetchRequest, *GuardFetchResponse) error
	// 编辑
	Edit(context.Context, *GuardEditRequest, *BlankResponse) error
	// 删除
	Delete(context.Context, *GuardDeleteRequest, *BlankResponse) error
}

func RegisterGuardHandler(s server.Server, hdlr GuardHandler, opts ...server.HandlerOption) error {
	type guard interface {
		Fetch(ctx context.Context, in *GuardFetchRequest, out *GuardFetchResponse) error
		Edit(ctx context.Context, in *GuardEditRequest, out *BlankResponse) error
		Delete(ctx context.Context, in *GuardDeleteRequest, out *BlankResponse) error
	}
	type Guard struct {
		guard
	}
	h := &guardHandler{hdlr}
	return s.Handle(s.NewHandler(&Guard{h}, opts...))
}

type guardHandler struct {
	GuardHandler
}

func (h *guardHandler) Fetch(ctx context.Context, in *GuardFetchRequest, out *GuardFetchResponse) error {
	return h.GuardHandler.Fetch(ctx, in, out)
}

func (h *guardHandler) Edit(ctx context.Context, in *GuardEditRequest, out *BlankResponse) error {
	return h.GuardHandler.Edit(ctx, in, out)
}

func (h *guardHandler) Delete(ctx context.Context, in *GuardDeleteRequest, out *BlankResponse) error {
	return h.GuardHandler.Delete(ctx, in, out)
}
