// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/actor/sync.proto

package actor

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Sync service

func NewSyncEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Sync service

type SyncService interface {
	// 推送
	Push(ctx context.Context, in *SyncPushRequest, opts ...client.CallOption) (*SyncPushResponse, error)
	// 拉取
	Pull(ctx context.Context, in *SyncPullRequest, opts ...client.CallOption) (*SyncPullResponse, error)
	// 上传
	Upload(ctx context.Context, in *SyncUploadRequest, opts ...client.CallOption) (*BlankResponse, error)
}

type syncService struct {
	c    client.Client
	name string
}

func NewSyncService(name string, c client.Client) SyncService {
	return &syncService{
		c:    c,
		name: name,
	}
}

func (c *syncService) Push(ctx context.Context, in *SyncPushRequest, opts ...client.CallOption) (*SyncPushResponse, error) {
	req := c.c.NewRequest(c.name, "Sync.Push", in)
	out := new(SyncPushResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncService) Pull(ctx context.Context, in *SyncPullRequest, opts ...client.CallOption) (*SyncPullResponse, error) {
	req := c.c.NewRequest(c.name, "Sync.Pull", in)
	out := new(SyncPullResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncService) Upload(ctx context.Context, in *SyncUploadRequest, opts ...client.CallOption) (*BlankResponse, error) {
	req := c.c.NewRequest(c.name, "Sync.Upload", in)
	out := new(BlankResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sync service

type SyncHandler interface {
	// 推送
	Push(context.Context, *SyncPushRequest, *SyncPushResponse) error
	// 拉取
	Pull(context.Context, *SyncPullRequest, *SyncPullResponse) error
	// 上传
	Upload(context.Context, *SyncUploadRequest, *BlankResponse) error
}

func RegisterSyncHandler(s server.Server, hdlr SyncHandler, opts ...server.HandlerOption) error {
	type sync interface {
		Push(ctx context.Context, in *SyncPushRequest, out *SyncPushResponse) error
		Pull(ctx context.Context, in *SyncPullRequest, out *SyncPullResponse) error
		Upload(ctx context.Context, in *SyncUploadRequest, out *BlankResponse) error
	}
	type Sync struct {
		sync
	}
	h := &syncHandler{hdlr}
	return s.Handle(s.NewHandler(&Sync{h}, opts...))
}

type syncHandler struct {
	SyncHandler
}

func (h *syncHandler) Push(ctx context.Context, in *SyncPushRequest, out *SyncPushResponse) error {
	return h.SyncHandler.Push(ctx, in, out)
}

func (h *syncHandler) Pull(ctx context.Context, in *SyncPullRequest, out *SyncPullResponse) error {
	return h.SyncHandler.Pull(ctx, in, out)
}

func (h *syncHandler) Upload(ctx context.Context, in *SyncUploadRequest, out *BlankResponse) error {
	return h.SyncHandler.Upload(ctx, in, out)
}
